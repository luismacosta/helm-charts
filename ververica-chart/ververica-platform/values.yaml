## Either a license must be provided under `vvp.license.data` or you must
## accept the Ververica Platform Community Edition License Agreement by setting
##
## Please read the documentation regarding features of Ververica Platform that are not available
## when using the Community Edition.
##
acceptCommunityEditionLicense: true

##
## Ververica Platform application configuration
##
vvp:
  # Flink version information shipped to the customer
  flinkVersionMetadata:
    - flinkVersion: 1.13.6
      imageTag: 1.13.6-stream1-scala_2.12-java8
      labels:
        scalaVersion: 2.12
        java: 8
      defaultFor:
        - 1.13
        - 1.13.6
    - flinkVersion: 1.13.6
      imageTag: 1.13.6-stream1-scala_2.12-java11
      labels:
        scalaVersion: 2.12
        java: 11
    - flinkVersion: 1.14.4
      imageTag: 1.14.4-stream1-scala_2.12-java8
      labels:
        scalaVersion: 2.12
        java: 8
      defaultFor:
        - 1.14
        - 1.14.4
    - flinkVersion: 1.14.4
      imageTag: 1.14.4-stream1-scala_2.12-java11
      labels:
        scalaVersion: 2.12
        java: 11
    - flinkVersion: 1.15.0
      imageTag: 1.15.0-stream1-scala_2.12-java8
      labels:
        scalaVersion: 2.12
        java: 8
      useForSqlDeployments: true
      defaultFor:
        - 1.15
        - 1.15.0
    - flinkVersion: 1.15.0
      imageTag: 1.15.0-stream1-scala_2.12-java11
      labels:
        scalaVersion: 2.12
        java: 11

  ## License configuration.
  #license:
  #  data: {}  # The contents of a Ververica Platform license

  ## Default registry configuration.
  ##
  ## This registry will be used for all image references in Ververica Platform, including the
  ## platform components themselves as well as Flink, unless overridden in a more specific config.
  registry: registry.ververica.com/v2.7

  ## Authentication configuration.
  auth:
    ## When disabled, all users are unauthenticated and have administrator privileges. Not
    ## recommended for production deployments.
    enabled: false

    ## SAML configuration
    #saml:
      #groupsAttribute: groups
      #registrationId: registration-id
      #entityId: entity-id
      #ssoServiceLocation: sso-service-location
      #certificateLocation: certificate-location-in-container

    ## A list of users and groups that have administrator privileges.
    ## - `user:user@example.com` matches the user `user@example.com`
    ## - `group:vvp-admins` matches users in the OIDC-supplied group `vvp-admins`
    ## - `system:authenticated` matches all authenticated users
    #admins:
    #- user:user@example.com

    ## An optional, statically-defined API token with administrator privileges for bootstrapping
    ## Ververica Platform.
    ##
    ## This token can be used, for example, to create an initial Namespace and assign its members.
    ## It is recommended to unset this token after bootstrapping.
    #bootstrapToken:
    #  token: dmVydmVyaWNhLmNvbS9jYXJlZXJz

    ## OIDC configuration. `registration` and `provider` are Spring Security objects; see the
    ## Ververica Platform documentation for examples and see [1] for Spring's documentation.
    ##
    ## [1]https://docs.spring.io/spring-boot/docs/2.2.0.RELEASE/reference/html/spring-boot-features.html#boot-features-security-oauth2-client
    #oidc:
    #  registrationId: google
    #  registration:
    #    clientId: client-id-from-provider
    #    clientSecret: secret-from-provider
    #  provider:
    #    userNameAttribute: email

  ## Platform metadata persistence configuration.
  ##
  ## This section configures how Ververica Platform stores metadata such as Deployments and
  ## Namespace information.
  ##
  ## Note: `vvp.persistence.type` is a required setting.
  persistence:
    ## REQUIRED: The type of persistence to use. Must be one of:
    ## * jdbc: store data in the database configured in the `datasource` section below
    ##   * Supported JDBC drivers: `sqlite`, `postgresql`, `mysql`
    ## * local: a preset for JDBC storage using SQLite on a local volume (required for Community
    ##   edition)
    type: ""

    ## Datasource configuration. This section is a Spring Boot object; see the Ververica Platform
    ## documentation for examples and see [1] for Spring Boot's documentation.
    ##
    ## [1]https://docs.spring.io/spring-boot/docs/2.2.0.RELEASE/reference/html/spring-boot-features.html#boot-features-connect-to-production-database
    #datasource: {}

  blobStorage: {}
    ## The base URI for universal blob storage.
    ##
    ## If unset, universal blob storage is disabled. If credentials are required, add them to the
    ## "Blob storage credentials" section below.
    #baseUri: ""

    ## Additional config options for supported blob storage providers.
    #s3:
    #  endpoint: ""
    #  region: ""
    #oss:
    #  endpoint: ""

  flinkDeploymentDefaults:
    ## Defaults to the registry specified under `vvp.registry`.
    #registry:
    repository: flink

  resultFetcher:
    ## Defaults to the registry specified under `vvp.registry`.
    #registry:
    repository: vvp-result-fetcher-service
    tag: 2.7.0
    ## Kubernetes resource configurations for the result-fetcher-service to execute ad-hoc SQL queries.
    #resources:
    #  limits:
    #    cpu: 500m
    #    memory: 500Mi
    #  requests:
    #    cpu: 100m
    #    memory: 300Mi

##
## SAML credentials
##
#samlCredentials:
  ## Use an existing Kubernetes secret instead of providing credentials in this file. The keys
  ## within the secret must be named as shown below.
  ##
  #existingSecret: secret-name

  #certificate: |-
    #certificate-file-from-identity-provider

##
## Blob storage credentials
##
#blobStorageCredentials:
#  ## Use an existing Kubernetes secret instead of providing credentials in this file. The keys
#  ## within the secret must follow the format: `<provider>.<credential>`
#  ##
#  ## For example: `s3.accessKeyId` or `azure.connectionString`
#  existingSecret: ""
#
#  azure:
#    connectionString: ""
#  s3:
#    accessKeyId: ""
#    secretAccessKey: ""
#  oss:
#    accessKeyId: ""
#    accessKeySecret: ""
#  hdfs:
#    core-site.xml: ""
#    hdfs-site.xml: ""
#    krb5.conf: ""
#    keytab: ""
#    keytab-principal: ""

##
## Additional volumes configuration.
##
## volumes: define the Kubernetes volumes that can be mounted into the Ververica Platform container(s)
## (but not Flink containers). The definition below is only an example and all volume definitions
## supported by Kubernetes are allowed.
##
## volumeMounts: define the Kubernetes volume mounts for attaching the volume(s) defined in the
## `volumes` section into the Ververica Platform container(s).
##
## Note: these volumes will only be attached to the containers running Ververica Platform itself,
##       not Flink application containers.
##
#volumes:
#- name: "my-volume"
#  secret:
#    secretName: "my-secret"
#
#volumeMounts:
#- name: "my-volume"
#  mountPath: "/some-path"
##
## Security Context of Ververica Platform Pod. Comment out when running on OpenShift.
##
securityContext:
  fsGroup: 999

##
## Container configuration for the application manager component
##
appmanager:
  image:
    ## Defaults to the registry specified under `vvp.registry` plus "/vvp-appmanager".
    #repository:
    tag: 2.7.0
    pullPolicy: Always

  resources:
    limits:
      cpu: 1000m
      memory: 1Gi
    requests:
      cpu: 250m
      memory: 1Gi

  artifactFetcherTag: 2.7.0

##
## Container configuration for the gateway component
##
gateway:
  image:
    ## Defaults to the registry specified under `vvp.registry` plus "/vvp-gateway".
    #repository:
    tag: 2.7.0
    pullPolicy: Always

  resources:
    limits:
      cpu: 1000m
      memory: 2Gi
    requests:
      cpu: 250m
      memory: 2Gi

##
## Container configuration for the ui component
##
ui:
  image:
    ## Defaults to the registry specified under `vvp.registry` plus "/vvp-ui".
    #repository:
    tag: 2.7.0
    pullPolicy: Always

  resources:
    limits:
      cpu: 100m
      memory: 32Mi
    requests:
      cpu: 100m
      memory: 32Mi

##
## Additional environment variables for the Ververica Platform Kubernetes deployment
##
env: []

##
## Additional containers to run in the VVP Pod
## see: https://kubernetes.io/docs/reference/kubernetes-api/workloads-resources/container/
##
extraContainers: []

##
## Additional initContainers to run in the VVP Pod
## see: https://kubernetes.io/docs/reference/kubernetes-api/workloads-resources/container/
##
extraInitContainers: []

##
## Kubernetes Service configuration
##
service:
  type: ClusterIP
  externalPort: 80
  targetPort: 8080
  labels: {}
  annotations: {}

##
## Kubernetes PersistentVolume configuration
##
persistentVolume:
  enabled: false

  # These must match the accessModes of the existing PVC or dynamic provisioner
  # Ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
  accessModes:
  - ReadWriteOnce

  # PVC annotations
  annotations: {}

  # Use an existing PVC
  #existingClaim: ""

  size: 8Gi

  # PV storage class
  # If defined, storageClassName: <storageClass>
  # If undefined (the default) or set to null, no storageClassName spec is
  #   set, choosing the default provisioner.  (gp2 on AWS, standard on
  #   GKE, AWS & OpenStack)
  #storageClass:

  # Subdirectory of the PersistentVolume to use
  subPath: ""

##
## Kubernetes RBAC configuration
##
rbac:
  ## Create a ServiceAccount, Role, and RoleBinding specifically for AppManager,
  ## this is useful for allowing access to private Docker Registries like
  ## Ververica's and ensures AppManager will have the necessary Kubernetes API
  ## access.
  create: true

  ## Add existing imagePullSecret to the ServiceAccount if rbac.create is `true`,
  ## if left unset and rbac.create is `true` the ServiceAccount won't have any
  ## credentials to pull from a private docker registry, like the Ververica one
  ## for obtaining Ververica Flink images and similar.
  #imagePullSecret: da-docker-login

  ## ServiceAccount to use if rbac.create is `false`, if you take this route this
  ## account must have the necessary permissions for the Kubernetes API, and also
  ## should take into account any necessary imagePullSecrets you may require.
  serviceAccountName: default

  ## Additional namespaces that the created ServiceAccount can access. The
  ## ServiceAccount will be granted the same set of permissions across all
  ## these namespaces. The namespace of the Application Manager pod should be
  ## omitted.
  #additionalNamespaces:
  #- namespace

## Node labels for pod assignment
## ref: https://kubernetes.io/docs/user-guide/node-selection/
##
nodeSelector: {}

## Tolerations for pod assignment
## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
##
tolerations: []

## Affinity for pod assignment
## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
##
affinity: {}

## Priority class name for pod assignment
## ref: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/
priorityClassName: ""

## Annotations for the Ververica Platform pod
## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
##
podAnnotations: {}

## Labels for the Ververica Platform deployment
## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels
##
deploymentLabels: {}

## Labels that are added to every resource in the chart
##
extraLabels: {}

## A path to a file in the Ververica Platform containers including the license i.e. file:/etc/license.yaml
## Schema ref: https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#features.external-config.files
##
licenseConfigPath: ""

# vim: syntax=yaml
